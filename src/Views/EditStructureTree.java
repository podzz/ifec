/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Listener.Tree.MouseMotionListener;
import Renderer.Tree.TreeRenderer;
import comptedit_db.StructAnalRequest;
import comptedit_db.StructureAnalytique;
import java.util.ArrayList;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Flash
 */
public class EditStructureTree extends javax.swing.JPanel {

    /**
     * Creates new form EditStructureTree
     */
    public EditStructureTree() {
        initComponents();

        DefaultMutableTreeNode category = new DefaultMutableTreeNode("Libelle");
        jXTree1.setModel(new DefaultTreeModel(category));
        jXTree1.addMouseMotionListener(new MouseMotionListener(jXTree1));
        jXTree1.setCellRenderer(new TreeRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jXTree1 = new org.jdesktop.swingx.JXTree();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setViewportView(jXTree1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void loadTree(String nameStruct) {
        DefaultMutableTreeNode n = new DefaultMutableTreeNode(nameStruct);

        // RESET TREE
        int count = n.getChildCount();
        for (int i = 0; i < count; i++) {
            n.remove(0);
        }

        for (String s : list_section(nameStruct)) {
            DefaultMutableTreeNode section = new DefaultMutableTreeNode(s);
            for (String s2 : list_compte(nameStruct, s)) {
                section.add(new DefaultMutableTreeNode(s2));
            }
            n.add(section);
        }
        jXTree1.setModel(new DefaultTreeModel(n));
        jXTree1.expandAll();
    }

    public List<String> list_compte(String nameStruct, String section) {
        List<StructureAnalytique> lsa = StructAnalRequest.getInstance().list_structanal_on_alias(nameStruct);
        List<String> ls = new ArrayList<String>();

        for (StructureAnalytique sa : lsa) {
            if (sa.getSection() != null && sa.getCompteAnalytique() != null && sa.getLibelle() != null) {
                if (sa.getSection().equals(section)) {
                    ls.add(sa.getCompteAnalytique() + " - " + sa.getLibelle());
                }
            }
        }

        for (StructureAnalytique sa : lsa) {
            if (sa.getSection() != null && sa.getSection().equals(section) && sa.getCompteAnalytique() == null) {
                ls.add(sa.getLibelle());
            }
        }

        return ls;
    }

    public List<String> list_section(String nameStruct) {
        List<StructureAnalytique> aux = StructAnalRequest.getInstance().list_structanal_on_alias(nameStruct);
        List<String> ls = new ArrayList<String>();

        for (StructureAnalytique aux_sa : aux) {
            if (aux_sa.getSection() != null && !ls.contains(aux_sa.getSection())) {
                ls.add(aux_sa.getSection());
            }
        }
        for (StructureAnalytique aux_sa : aux) {
            if (aux_sa.getSection() == null && aux_sa.getCompteAnalytique() == null) {
                ls.add(aux_sa.getLibelle());
            }
        }

        return ls;
    }

    public String formatCompte(String compte)
    {
        return compte.substring(0,4);
    }
    
    public String formatLibelle(String compte)
    {
        return compte.split(" - ")[1];
    }
    
    public void saveTree() {
        List<StructureAnalytique> l = new ArrayList<StructureAnalytique>();
        DefaultMutableTreeNode root_ = (DefaultMutableTreeNode) jXTree1.getModel().getRoot();
        for (int i = 0; i < root_.getChildCount(); i++) {
            DefaultMutableTreeNode child_ = (DefaultMutableTreeNode) root_.getChildAt(i);
            if (child_.getChildCount() > 0) {
                for (int j = 0; j < child_.getChildCount(); j++)
                {
                    DefaultMutableTreeNode compte_child_ = (DefaultMutableTreeNode) child_.getChildAt(j);
                    if (compte_child_.toString().startsWith("Calcul :"))
                        l.add(new StructureAnalytique(root_.toString(), child_.toString(), null, compte_child_.toString()));
                    else
                        l.add(new StructureAnalytique(root_.toString(), child_.toString(), compte_child_.toString().substring(0,4), compte_child_.toString().split(" - ")[1]));
                }
            }
            else
            {
                if (child_.toString().startsWith("Calcul :"))
                    l.add(new StructureAnalytique(root_.toString(), null, null, child_.toString()));
            }
        }
        StructAnalRequest.getInstance().delete_all_alias(root_.toString());
        StructAnalRequest.getInstance().add_all(l);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTree jXTree1;
    // End of variables declaration//GEN-END:variables

}
